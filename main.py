import logging
import time
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium import webdriver
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telegram import Update, ReplyKeyboardMarkup
Token_tg = '7742618807:AAFhs_iDheMVTloiQD9SOtpVPvEKANbshvg'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
INPUT_TRACKING_NUMBER = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞


def parse_cargo_data(tracking_number):
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π ChromeDriver
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')  # –ë–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        options.add_argument('--disable-gpu')
        driver = webdriver.Chrome(service=Service(
            ChromeDriverManager().install()), options=options)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
        driver.get('https://www.cargog20.com/h5/#/')

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'input[placeholder="ËØ∑ËæìÂÖ•ËøêÂçïÂè∑"]'))
        )

        # –í–≤–æ–¥–∏–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
        input_field = driver.find_element(
            By.CSS_SELECTOR, 'input[placeholder="ËØ∑ËæìÂÖ•ËøêÂçïÂè∑"]')
        input_field.send_keys(tracking_number)

        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
        search_button = driver.find_element(
            By.CSS_SELECTOR, 'button[aria-label="ÊêúÁ¥¢"]')  # –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
        search_button.click()

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, '.result-container'))  # –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
        )

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
        total_weight = driver.find_element(
            By.CSS_SELECTOR, '.total-weight').text  # –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
        total_volume = driver.find_element(
            By.CSS_SELECTOR, '.total-volume').text  # –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
        delivery_date = driver.find_element(
            By.CSS_SELECTOR, '.delivery-date').text  # –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
        delivery_status = driver.find_element(
            By.CSS_SELECTOR, '.delivery-status').text  # –£—Ç–æ—á–Ω–∏—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = (
            f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {tracking_number}\n"
            f"‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {total_weight}\n"
            f"üìè –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume}\n"
            f"üìÖ –î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏: {delivery_date}\n"
            f"üöö –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_status}"
        )

        driver.quit()
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        driver.quit()
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# –ö–æ–º–∞–Ω–¥–∞ /start


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º")

    keyboard = [['–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É']]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –Ω–∞ —Å–∞–π—Ç–µ cargog20.com. "
        "–ù–∞–∂–º–∏ '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É' –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
        reply_markup=reply_markup
    )
    return INPUT_TRACKING_NUMBER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞


async def receive_tracking_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text

    if user_input == '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É':
        await update.message.reply_text("üì¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏.")
        return INPUT_TRACKING_NUMBER

    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞
    result = parse_cargo_data(user_input)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(result)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    keyboard = [['–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É']]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–•–æ—á–µ—à—å –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–æ—Å—ã–ª–∫—É?", reply_markup=reply_markup)
    return INPUT_TRACKING_NUMBER

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END


def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token(Token_tg).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            INPUT_TRACKING_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_tracking_number)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == '__main__':
    main()
